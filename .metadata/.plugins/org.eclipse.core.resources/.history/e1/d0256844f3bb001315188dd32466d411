package fr.esgi.project.Thread;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Grabber implements Runnable {
	private String url, startUrl;
	private Pattern htmltag;
	private Pattern link;
	
	public Grabber(String u) throws MalformedURLException{
		this.url = u;
		System.out.println(new URL(url).getHost());
		if(u.matches("https?://[^/]*(/.+)+")){
			this.startUrl = u.replaceAll("(https?://[^/]*)(/.*)?", "$1");	
		}
		else{
			this.startUrl = this.url;
			this.url += "index.html";
		}
	    htmltag = Pattern.compile("<a\\b[^>]*href=\"[^>]*>(.*?)</a>");
	    link = Pattern.compile("href=\"[^>]*\">");
	}
	
	@Override
	public void run() {
    	List<String> links = this.filterUrl(this.url, this.getLinks(this.url));
    	for(String s : links)
    		System.out.println(s);
	}
	
	private List<String> filterUrl(String url, List<String> links){
		List<String> filteredLinks = new ArrayList<String>();
		for(String s : links)
			if(s.matches(this.url+".*"))
				filteredLinks.add(s);
		return filteredLinks;
	}

	private List<String> getLinks(String url) {
		List<String> links = new ArrayList<String>();
		try {
			BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
			String s;
			StringBuilder builder = new StringBuilder();
			while ((s = bufferedReader.readLine()) != null) {
				builder.append(s);
			}
	
			Matcher tagmatch = htmltag.matcher(builder.toString());
			while (tagmatch.find()) {
				Matcher matcher = link.matcher(tagmatch.group());
				matcher.find();
				String link = matcher.group().replaceFirst("href=\"", "").replaceFirst("\">", "").replaceFirst("\"[\\s]?target=\"[a-zA-Z_0-9]*", "");
				if (valid(link)) {
					links.add(makeAbsolute(url, link));
				}
			}
			bufferedReader.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return links;
	}
	
	private boolean valid(String s) {
		return !s.matches("javascript:.*|mailto:.*");
	}
	
	private String makeAbsolute(String url, String link) {
		if (link.matches("http://.*")) {
			return link;
		}
		if (link.matches("/.*") && url.matches(".*$[^/]")) {
			return url + "/" + link;
		}
		if (link.matches("[^/].*") && url.matches(".*[^/]")) {
			return url + "/" + link;
		}
		if (link.matches("/.*") && url.matches(".*[/]")) {
			return url + link;
		}
		if (link.matches("/.*") && url.matches(".*[^/]")) {
			return url + link;
		}
		throw new RuntimeException("Cannot make the link absolute. Url: " + url + " Link " + link);
	}
}
